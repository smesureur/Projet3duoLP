/*
 * This file is part of LibrePlan
 *
 * Copyright (C) 2009-2010 Fundación para o Fomento da Calidade Industrial e
 *                         Desenvolvemento Tecnolóxico de Galicia
 * Copyright (C) 2010-2011 Igalia, S.L.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.libreplan.web.orders;

import org.libreplan.business.orders.entities.OrderElement;
import org.libreplan.web.common.Util;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.util.GenericForwardComposer;
import org.zkoss.zul.api.Datebox;

/**
 * Controller for {@link OrderElement} details
 *
 * @author Diego Pino García <dpino@igalia.com>
 *
 */
public class DetailsOrderElementController extends
        GenericForwardComposer {

    private IOrderElementModel orderElementModel;

    private Datebox deadline;

    @Override
    public void doAfterCompose(Component comp) throws Exception {
        super.doAfterCompose(comp);
        comp.setVariable("detailsController", this, true);
    }

    public void setOrderElementModel(IOrderElementModel orderElementModel) {
        this.orderElementModel = orderElementModel;
    }

    public OrderElement getOrderElement() {
        return orderElementModel.getOrderElement();
    }

    public void openWindow(IOrderElementModel model) {
        setOrderElementModel(model);
        deadline.setDisabled(isSubcontracted());
        Util.reloadBindings(self);
    }

    public boolean isCodeAutogenerated() {
        return orderElementModel.isCodeAutogenerated();
    }

    public boolean isContainer() {
        if (orderElementModel.getOrderElement() == null) {
            return false;
        }
        return !orderElementModel.getOrderElement().isLeaf();
    }

    private boolean isSubcontracted() {
        if (orderElementModel.getOrderElement() == null
                || orderElementModel.getOrderElement().getTaskSource() == null) {
            return false;
        }
        return orderElementModel.getOrderElement().getTaskSource().getTask()
                .isSubcontracted();
    }

    public String getMoneyFormat() {
        return Util.getMoneyFormat();
    }

    public boolean isCodeDisabled() {
        if (isCodeAutogenerated()) {
            return true;
        }
        OrderElement orderElement = orderElementModel.getOrderElement();
        if (orderElement == null) {
            return false;
        }
        return orderElement.isJiraIssue();
    }

}